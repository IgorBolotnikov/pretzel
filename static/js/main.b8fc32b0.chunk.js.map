{"version":3,"sources":["Calculation/constants.ts","Calculation/helpers.ts","shared/components/Input/Input.tsx","shared/components/Paragraph/Paragraph.tsx","Calculation/components/CalcularionForm/CalculationForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NUMBER_TO_WORD_MAP","numberToWord","num","strNum","toString","length","startsWith","endsWith","Number","slice","Error","getRandomNumber","min","max","Math","floor","random","Input","type","value","onChange","handleChange","useCallback","event","target","className","Paragraph","children","CalculationForm","useState","left","setLeft","right","setRight","inputValue","setInputValue","message","setMessage","resetForm","handleSubmit","preventDefault","expectedAnswer","setTimeout","onSubmit","App","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b8fc32b0.chunk.js","sourcesContent":["export const NUMBER_TO_WORD_MAP: Record<string, string> = {\n  '1': 'ein',\n  '2': 'zwei',\n  '3': 'drei',\n  '4': 'vier',\n  '5': 'fünf',\n  '6': 'sechs',\n  '7': 'sieben',\n  '8': 'acht',\n  '9': 'neun',\n\n  '10': 'zehn',\n  '11': 'elf',\n  '12': 'zwölf',\n  '13': 'dreizehn',\n  '14': 'vierzehn',\n  '15': 'fünfzehn',\n  '16': 'sechszehn',\n  '17': 'siebzehn',\n  '18': 'achtzehn',\n  '19': 'neunzehn',\n\n  '20': 'zwanzig',\n  '30': 'dreißig',\n  '40': 'vierzig',\n  '50': 'fünfzig',\n  '60': 'sechszig',\n  '70': 'siebzig',\n  '80': 'achtzig',\n  '90': 'neunzig',\n\n  '100': 'einhundert',\n};\nexport const AND = 'und';\nexport const PLUS = '+';\nexport const EQUALS = '=';\n","import { AND, NUMBER_TO_WORD_MAP } from 'src/Calculation/constants';\n\nexport function numberToWord(num: number): string {\n  const strNum = num.toString();\n  const numLen = strNum.length;\n  switch (numLen) {\n    case 1:\n      return NUMBER_TO_WORD_MAP[strNum];\n    case 2:\n      if (strNum.startsWith('1') || strNum.endsWith('0')) {\n        return NUMBER_TO_WORD_MAP[strNum];\n      }\n      return NUMBER_TO_WORD_MAP[strNum[1]] + AND + NUMBER_TO_WORD_MAP[`${strNum[0]}0`];\n    case 3:\n      return NUMBER_TO_WORD_MAP[`${strNum[0]}00`] + numberToWord(Number(strNum.slice(1)));\n    default:\n      throw new Error(`Received invalid number ${strNum}`);\n  }\n}\n\n/**\n * Returns a random integer between min (inclusive) and max (inclusive).\n * The value is no lower than min (or the next integer greater than min\n * if min isn't an integer) and no greater than max (or the next integer\n * lower than max if max isn't an integer).\n */\nexport function getRandomNumber(min: number = 1, max: number = 100): number {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n","import React, { useCallback } from 'react';\n\nimport './Input.sass';\n\ninterface InputProps {\n  type?: 'text' | 'email';\n  value: string;\n\n  onChange(value: string): void;\n}\n\nexport const Input = ({\n  type = 'text',\n  value,\n  onChange,\n}: InputProps): React.ReactElement => {\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      onChange(event.target.value);\n    }, [onChange],\n  );\n\n  return (\n    <input\n      className=\"input\"\n      type={type}\n      value={value}\n      onChange={handleChange}\n    />\n  );\n};\n","import React from 'react';\n\ninterface ParagraphProps {\n  children: React.ReactNode,\n  className?: string,\n}\n\nexport const Paragraph = ({\n  children,\n  className,\n}: ParagraphProps): React.ReactElement => (\n  <p className={className}>\n    {children}\n  </p>\n);\n","import React, { useCallback, useState } from 'react';\n\nimport { EQUALS, PLUS } from 'src/Calculation/constants';\nimport { getRandomNumber, numberToWord } from 'src/Calculation/helpers';\nimport { Input } from 'src/shared/components/Input/Input';\nimport { Paragraph } from 'src/shared/components/Paragraph/Paragraph';\n\nimport './CalculationForm.sass';\n\nexport const CalculationForm = (): React.ReactElement => {\n  const [left, setLeft] = useState(() => getRandomNumber());\n  const [right, setRight] = useState(() => getRandomNumber());\n  const [inputValue, setInputValue] = useState('');\n  const [message, setMessage] = useState<string>('');\n\n  const resetForm = useCallback(() => {\n    setMessage('');\n    setLeft(getRandomNumber());\n    setRight(getRandomNumber());\n    setInputValue('');\n  }, []);\n\n  const handleSubmit = useCallback((event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const expectedAnswer = numberToWord(left + right);\n    if (inputValue === expectedAnswer) {\n      setMessage('Correct!');\n      setTimeout(() => {\n        resetForm();\n      }, 1000);\n    } else {\n      setMessage('Nope!');\n      setTimeout(() => {\n        setMessage('');\n      }, 1000);\n    }\n  }, [inputValue, left, resetForm, right]);\n\n  return (\n    <div className=\"calculation-form\">\n      {!!message && (\n        <div>\n          {message}\n        </div>\n      )}\n      <form onSubmit={handleSubmit}>\n        <Paragraph>\n          <span>{numberToWord(left)}</span>\n          <span className=\"calculation-form__operator\">{PLUS}</span>\n          <span>{numberToWord(right)}</span>\n          <span className=\"calculation-form__operator\">{EQUALS}</span>\n        </Paragraph>\n        <Input value={inputValue} onChange={setInputValue} />\n      </form>\n\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { CalculationForm } from 'src/Calculation/components/CalcularionForm/CalculationForm';\n\nimport 'src/App.scss';\n\nfunction App(): React.ReactElement {\n  return (\n    <div className=\"App\">\n      <CalculationForm />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry) {\n    import('web-vitals')\n      .then(({\n        getCLS,\n        getFID,\n        getFCP,\n        getLCP,\n        getTTFB,\n      }): void => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'src/index.scss';\nimport App from 'src/App';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}